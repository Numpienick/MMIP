// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231204133617_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Entities.Branche", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_branches");

                    b.ToTable("branches", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Challenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BannerImagePath")
                        .HasColumnType("text")
                        .HasColumnName("banner_image_path");

                    b.Property<int>("ChallengeVisibility")
                        .HasColumnType("integer")
                        .HasColumnName("challenge_visibility");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("Deadline")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FinalReport")
                        .HasColumnType("text")
                        .HasColumnName("final_report");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("phase_id");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("short_description");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_challenges");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_challenges_organization_id");

                    b.HasIndex("PhaseId")
                        .HasDatabaseName("ix_challenges_phase_id");

                    b.ToTable("challenges", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CommentType")
                        .HasColumnType("integer")
                        .HasColumnName("comment_type");

                    b.Property<bool>("Concluded")
                        .HasColumnType("boolean")
                        .HasColumnName("concluded");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("phase_id");

                    b.Property<string[]>("RequiredFields")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("required_fields");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_field");

                    b.HasIndex("PhaseId")
                        .HasDatabaseName("ix_field_phase_id");

                    b.ToTable("field", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Phase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("NameId")
                        .HasColumnType("uuid")
                        .HasColumnName("name_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_phases");

                    b.HasIndex("NameId")
                        .HasDatabaseName("ix_phases_name_id");

                    b.ToTable("phases", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LanguageIso")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_iso");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("phase_id");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_text");

                    b.HasIndex("PhaseId")
                        .HasDatabaseName("ix_text_phase_id");

                    b.ToTable("text", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("phase_id");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_user_groups");

                    b.HasIndex("PhaseId")
                        .HasDatabaseName("ix_user_groups_phase_id");

                    b.ToTable("user_groups", (string)null);
                });

            modelBuilder.Entity("Shared.Entities.Challenge", b =>
                {
                    b.HasOne("Shared.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_challenges_organizations_organization_id");

                    b.HasOne("Shared.Entities.Phase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("fk_challenges_phases_phase_id");

                    b.Navigation("Organization");

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("Shared.Entities.Field", b =>
                {
                    b.HasOne("Shared.Entities.Phase", null)
                        .WithMany("RequiredeFields")
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("fk_field_phases_phase_id");
                });

            modelBuilder.Entity("Shared.Entities.Phase", b =>
                {
                    b.HasOne("Shared.Entities.Text", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_phases_text_name_id");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Shared.Entities.Text", b =>
                {
                    b.HasOne("Shared.Entities.Phase", null)
                        .WithMany("Texts")
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("fk_text_phases_phase_id");
                });

            modelBuilder.Entity("Shared.Entities.UserGroup", b =>
                {
                    b.HasOne("Shared.Entities.Phase", null)
                        .WithMany("VisibleTo")
                        .HasForeignKey("PhaseId")
                        .HasConstraintName("fk_user_groups_phases_phase_id");
                });

            modelBuilder.Entity("Shared.Entities.Phase", b =>
                {
                    b.Navigation("RequiredeFields");

                    b.Navigation("Texts");

                    b.Navigation("VisibleTo");
                });
#pragma warning restore 612, 618
        }
    }
}
