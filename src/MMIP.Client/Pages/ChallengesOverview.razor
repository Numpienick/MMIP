@using System.Linq;
@using MMIP.Shared.Views

@inject IStringLocalizer<ApplicationResource> Localizer
@inject HttpClient Client;

@page "/challenges-overview"

<h1 class="mb-10">@Localizer["ChallengesPageTitle"]</h1>

@* TODO: Remove grid *@
<MudGrid Justify="Justify.Center" Class="mb-15">
    <MudItem md="12">
        <MudCard Elevation="4" Class="rounded-lg px-6">
            @* TODO: Remove grid *@
            <MudGrid Justify="Justify.Center">
                <MudItem md="8" Class="mb-10 mt-8">
                    <MudTextField @bind-Value="SearchTerms" Label="@Localizer["SearchTerms"]" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary"/>
                </MudItem>
            </MudGrid>

            <MudGrid Justify="Justify.FlexStart" Spacing="4">
                @foreach (var cardData in _allChallenges)
                {
                    <MudItem xs="12" sm="6" md="4" lg="4" xl="3">
                        <ChallengeCardComponent CardData="@cardData"></ChallengeCardComponent>
                    </MudItem>
                }
            </MudGrid>

            @* TODO: Remove grid *@
            <MudGrid Justify="Justify.Center" Class="mt-15">
                <MudItem md="6">
                    <MudButton @onclick="@_loadBatch" FullWidth="true" Variant="Variant.Filled" Color="Color.Inherit" Disabled="@_gotAllChallenges">@Localizer["ChallengesLoadMore"]</MudButton>
                </MudItem>
            </MudGrid>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
        private const int BatchSize = 6;

    public string? SearchTerms { get; set; }

    private List<ChallengeCardComponentView> _allChallenges = new();
    private bool _gotAllChallenges;

    protected override async Task OnInitializedAsync()
    {
        await _loadBatch();
        await base.OnInitializedAsync();
    }

    private async Task _loadBatch()
    {
        _allChallenges.AddRange(await _getChallengeCardViews(BatchSize, _allChallenges.Count));
        StateHasChanged();
    }

    private async Task<IEnumerable<ChallengeCardComponentView>> _getChallengeCardViews(int take, int skip)
    {
    // TODO: replace with requestcontroller when Whim is done
        var cards = (await Client.GetFromJsonAsync<IEnumerable<ChallengeCardComponentView>>($"challenges/overview?take={take}&&skip={skip}")
                     ?? Enumerable.Empty<ChallengeCardComponentView>()).ToList();

        if (cards.Count() < take)
            _gotAllChallenges = true;

        return cards;
    }

}