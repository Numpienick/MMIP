@using MMIP.Client.Controllers;
@using MMIP.Shared.Views
@using Microsoft.AspNetCore.Components.Forms

@inject IStringLocalizer<ApplicationResource> Localizer
@inject NavigationManager NavigationManager;

@page "/challenge-view/{ChallengeId:guid}"

<div class="flex-auto d-flex flex-column">
    <div Class="d-flex banner px-2 mb-12 justify-center">
        <MudImage Class="rounded-lg mud-elevation-4" Fluid="true" ObjectFit="ObjectFit.Cover" Src="@_view?.BannerImagePath"/>
    </div>

    <MudGrid Class="flex-auto" Justify="Justify.Center" Spacing="8">
        <MudItem xs="11" md="10" Class="mb-8">
            <h1>@_view?.Title</h1>
        </MudItem>

        @if (!string.IsNullOrEmpty(_view?.FinalReport))
        {
            <MudItem xs="12" md="10">
                <MudCard Elevation="4" Class="rounded-lg">
                    <MudCardContent>
                        <h2>@Localizer["ChallengeFinalReport"]</h2>
                        <p>@_view?.FinalReport</p>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }

        <MudItem xs="12" md="10">
            <MudCard Elevation="4" Class="rounded-lg">
                <MudCardContent>
                    <MudGrid Justify="Justify.SpaceBetween">
                        <MudItem xs="4">
                            <h2 class="card-centered-text mb-2">@Localizer["ChallengeStartDate"]</h2>
                            <MudDivider Class="mb-3"></MudDivider>
                            <h3 class="card-centered-text">@_view?.StartDate.Date.ToString("dd/MM/yyyy")</h3>
                        </MudItem>
                        <MudItem xs="4">
                            <h2 class="card-centered-text mb-2">@Localizer["ChallengeDeadline"]</h2>
                            <MudDivider Class="mb-3"></MudDivider>
                            <h3 class="card-centered-text">@_view?.Deadline.ToString("dd/MM/yyyy")</h3>
                        </MudItem>
                        <MudItem xs="4" Class="d-flex flex-column">
                            <h2 class="card-centered-text mb-auto">@Localizer["ChallengePhase"]</h2>
                            <MudDivider Class="flex-none mb-3"></MudDivider>
                            <h3 class="card-centered-text">@_view?.PhaseName</h3>
                        </MudItem>
                        <MudItem xs="12">
                            <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="_view?.Progress ?? 0" Min="0" Max="100"/>
                            <h2 class="mt-4">@Localizer["ChallengeDescription"]</h2>
                            <p>@_view?.Description</p>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="10" sm="8" md="6">
            <MudCard Elevation="4" Class="rounded-lg">
                <MudCardContent>
                    <MudGrid Justify="Justify.SpaceBetween">
                        <MudItem xs="6" sm="5" md="4" lg="3">
                            <MudImage Fluid="true" ObjectFit="ObjectFit.Cover" Src="@_view?.OrganizationAvatarPath" Class="rounded-lg mud-elevation-2"/>
                        </MudItem>
                        <MudItem xs="6" sm="6" md="7" lg="9">
                            <a href="/profile/organization/@_view?.OrganizationId">
                                <h2>@_view?.OrganizationName</h2>
                            </a>
                            <MudDivider Class="mt-2 mb-5"></MudDivider>
                            <h3>@_view?.CreatorName</h3>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="10" md="8">
            <MudCard Elevation="4" Class="rounded-lg">
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <h2 class="centered-text mb-5">@Localizer["ChallengeComments"]</h2>
                        </MudItem>
                        <MudItem xs="12">
                            <EditForm Model="_model" OnValidSubmit="@_validFormSubmitted" OnInvalidSubmit="@_invalidFormSubmitted">
                                <DataAnnotationsValidator/>
                                <MudGrid Justify="Justify.Center">
                                    <MudItem xs="10">
                                        <MudTextField Lines="9" Variant="Variant.Outlined" Label=@Localizer["CreateComment"]                                            @bind-Value="_model.Text" For="@(() => _model.Text)"/>
                                    </MudItem>
                                    @* <MudItem xs="5"> *@
                                    @* TODO: write logic to get all comment types *@
                                    @* <MudSelect Variant="Variant.Outlined" Label=@_localizer["FormCommentType"] @bind-Value="_model.CommentType" T="CommentType"> *@
                                    @*     @foreach (CommentType commentType in Enum.GetValues(typeof(CommentType))) *@
                                    @*     { *@
                                    @*         <MudSelectItem Value="@commentType" T="CommentType">@commentType.GetCommentTypePropertyValue("Name")</MudSelectItem> *@
                                    @*     } *@
                                    @* </MudSelect> *@
                                    @* </MudItem> *@
                                    <MudItem xs="0" md="6" lg="8" Class="hidd">
                                        <MudSpacer/>
                                    </MudItem>
                                    <MudItem xs="6" md="5" lg="3" Class="align-xs-center">
                                        <MudButton Class="py-2" ButtonType="ButtonType.Submit" FullWidth Variant="Variant.Filled" Color="Color.Primary">@Localizer["CreateCommentButton"]</MudButton>
                                    </MudItem>
                                    <MudItem xs="0" md="1">
                                        <MudSpacer/>
                                    </MudItem>
                                </MudGrid>
                            </EditForm>
                        </MudItem>
                        <MudItem xs="12">
                            <MudDivider Class="mt-6 mb-6" DividerType="DividerType.FullWidth"/>
                        </MudItem>
                        @{
                            if (!_comments.Any())
                            {
                                <MudItem>
                                    <h2 class="card-centered-text">@Localizer["ChallengeNoComments"]</h2>
                                </MudItem>
                            }
                            else
                            {
                                foreach (var comment in _comments)
                                {
                                    <MudItem xs="12" Class="mb-10">
                                        <CommentComponent CommentData="comment"></CommentComponent>
                                    </MudItem>
                                }
                            }
                        }
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</div>

@code {

    [Parameter] public Guid ChallengeId { get; set; }

    [Inject] internal RequestController RequestController { get; set; }

    private ChallengeView? _view { get; set; }
    private List<CommentView> _comments { get; set; } = new();
    private CommentView _model = new();

    protected override async Task OnInitializedAsync()
    {
        _comments = await _getComments();
        _view = await _getView();
    }

    private Task<ChallengeView?> _getView()
    {
        return RequestController.Get<ChallengeView>($"challenges/view?id={ChallengeId}");
    }

    private Task<List<CommentView>> _getComments()
    {
        return RequestController.GetRange<CommentView>($"comments/view?id={ChallengeId}");
    }

    // TODO: Add posting comment functionality
    private void _validFormSubmitted(EditContext context)
    {
        //await RequestController.Post("comments", _model);
        //Comments = await _getComments();
        StateHasChanged();
    }

    private void _invalidFormSubmitted(EditContext context)
    {
        //_snackbar.Add(_localizer["SnackbarInvalid"], Severity.Error);
        StateHasChanged();
    }

}