@using MMIP.Client.Controllers;
@using MMIP.Shared.Views

@inject IStringLocalizer<ApplicationResource> Localizer
@inject NavigationManager NavigationManager;

@page "/challenge-view/{ChallengeId:guid}"

<div Width="100%" class="banner-image">
    <MudImage ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Fill" Src="@View.BannerImagePath" style="width: 100%; max-height: inherit;"></MudImage>
</div>

<h1 class="mb-15">@View.Title</h1>

@if (!string.IsNullOrEmpty(View.FinalReport))
{
    <MudGrid Class="mb-8" Justify="Justify.Center">
        <MudItem md="10">
            <MudCard Elevation="4" Class="rounded-lg">
                <MudCardContent>
                    <h2>@Localizer["ChallengeFinalReport"]</h2>
                    <p>@View.FinalReport</p>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@if (View != null)
{
    <MudGrid Class="mb-8" Justify="Justify.Center">
        <MudItem md="10" Class="justify-center">
            <MudCard Elevation="4" Class="rounded-lg">
                <MudCardContent>
                    <MudGrid Justify="Justify.SpaceBetween">
                        <MudItem md="4">
                            <h2 class="card-centered-text mb-2">@Localizer["ChallengeStartDate"]</h2>
                            <MudDivider Class="mb-3"></MudDivider>
                            <h3 class="card-centered-text">@View.StartDate.Date.ToString("dd/MM/yyyy")</h3>
                        </MudItem>
                        <MudItem md="4">
                            <h2 class="card-centered-text mb-2">@Localizer["ChallengeDeadline"]</h2>
                            <MudDivider Class="mb-3"></MudDivider>
                            <h3 class="card-centered-text">@View.Deadline.ToString("dd/MM/yyyy")</h3>
                        </MudItem>
                        <MudItem md="4">
                            <h2 class="card-centered-text mb-2">@Localizer["ChallengePhase"]</h2>
                            <MudDivider Class="mb-3"></MudDivider>
                            <h3 class="card-centered-text">@View.PhaseName</h3>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardContent>
                    <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="View.Progress" Min="0" Max="100"/>
                </MudCardContent>
                <MudCardContent>
                    <h2 class="mt-4">@Localizer["ChallengeDescription"]</h2>
                    <p>@View.Description</p>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudGrid Class="mb-8" Justify="Justify.Center">
        <MudItem md="5">
            <MudCard Elevation="4" Class="rounded-lg">
                <MudCardContent>
                    <MudGrid>
                        <MudItem md="7">
                            <a href="/profile/organization/@organizationId">
                            <MudCardMedia Image="Assets/Img/1600x888.jpg" Height="150"></MudCardMedia>
                            </a>
                        </MudItem>
                        <MudItem md="5">
                            @* TODO: create a view *@
                            <a href="/profile/organization/@organizationId"><h2 class="card-organization-title">@View.OrganizationName</h2></a>
                            <MudDivider Class="mt-2 mb-5"></MudDivider>
                            <a href="/profile/user/@userId"><h3 class="card-centered-text">Leander Jelgersma</h3></a>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

<MudGrid Justify="Justify.Center">
    <MudItem md="8">
        <MudCard Elevation="4" Class="rounded-lg">
            <MudCardContent>
                <h2 class="mb-5">@Localizer["ChallengeComments"]</h2>
                <EditForm Model="_model" OnValidSubmit=@_validFormSubmitted OnInvalidSubmit=@_invalidFormSubmitted>
                    <DataAnnotationsValidator />
                    <MudGrid Justify="Justify.Center">
                        <MudItem md="7">
                            <MudTextField Lines="9" Variant="Variant.Outlined" Label=@Localizer["CreateComment"] @bind-Value="_model.Text" For="@(() => _model.Text)" />
                        </MudItem>
                        <MudItem md="5">
@*                             TODO: write logic to get all comment types
 *@@*                             <MudSelect Variant="Variant.Outlined" Label=@_localizer["FormCommentType"] @bind-Value="_model.CommentType" T="CommentType">
                                @foreach (CommentType commentType in Enum.GetValues(typeof(CommentType)))
                                {
                                    <MudSelectItem Value="@commentType" T="CommentType">@commentType.GetCommentTypePropertyValue("Name")</MudSelectItem>
                                }
                            </MudSelect> *@
                        </MudItem>
                        <MudItem md="6">
                            <MudButton ButtonType="ButtonType.Submit" FullWidth Variant="Variant.Filled" Color="Color.Primary">@Localizer["CreateCommentButton"]</MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudCardContent>
            <MudDivider Class="mt-6 mb-6" DividerType="DividerType.FullWidth"></MudDivider>
            <MudCardContent>
                @{
                    if (Comments.Count == 0)
                    {
                        <h2 class="card-centered-text">@Localizer["ChallengeNoComments"]</h2>
                    }

                    else
                    {
                        foreach (var comment in Comments)
                        {
                            <MudGrid Justify="Justify.Center" Class="mb-10">
                                <UserCommentComponent CommentData="comment"></UserCommentComponent>
                            </MudGrid>
                        }
                    }
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public Guid ChallengeId { get; set; }

    [Inject]
    internal RequestController RequestController { get; set; }

    private Guid organizationId = Guid.Parse("00000000-0000-0000-0000-000000000001");
    private Guid userId = Guid.Parse("00000000-0000-0000-0000-000000000001");

    public ChallengeView? View { get; set; }
    public List<CommentView> Comments { get; set; }
    private CommentView _model = new();

    protected override async Task OnInitializedAsync()
    {
        Comments = await _getComments();
        View = await _getView();
        await base.OnInitializedAsync();
    }

    private Task<ChallengeView?> _getView()
    {
        return RequestController.Get<ChallengeView>($"challenges/view?id={ChallengeId}");
    }

    private Task<List<CommentView?>> _getComments()
    {
        return RequestController.Get<List<CommentView>>($"comments/view?id={ChallengeId}");
    }

    // TODO: Add posting comment functionality
    private async void _validFormSubmitted()
    {
        //await RequestController.Post("comments", _model);
        //Comments = await _getComments();
        StateHasChanged();
    }

    private void _invalidFormSubmitted()
    {
        //_snackbar.Add(_localizer["SnackbarInvalid"], Severity.Error);
        StateHasChanged();
    }
}