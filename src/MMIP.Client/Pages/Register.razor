@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@using MMIP.Shared.Entities
@using Microsoft.AspNetCore.Authentication
@inject IStringLocalizer<ApplicationResource> Localizer

<PageTitle>Registreren</PageTitle>

<h1>@Localizer["Register"]</h1>
<br/>
<EditForm Model=@_user OnValidSubmit=@_validFormSubmitted OnInvalidSubmit=@_invalidFormSubmitted>
    <DataAnnotationsValidator />
    <FormFields>
        <MudGrid>
            <MudItem md="4" xs="12">
                <MudItem>
                    <h2>Profielbeschrijving</h2>
                    <MudTextField T="string" Label="Profielbeschrijving" Variant="Variant.Outlined" Lines="10"></MudTextField>
                </MudItem>
            </MudItem>
            <MudItem md="8" xs="12">
                <MudGrid>
                    <MudItem md="4" xs="12">
                        <h2>Voornaam</h2>
                        <MudTextField @bind-Value=@_user.FirstName For="@(() => _user.FirstName)" Variant="Variant.Outlined" Label="Voornaam" InputType="@_textInput"></MudTextField>
                    </MudItem>
                    <MudItem md="4" xs="12">
                        <h2>Tussenvoegsel</h2>
                        <MudTextField @bind-Value=@_user.Prefixes For="@(() => _user.Prefixes)" Variant="Variant.Outlined" Label="Tussenvoegsel" InputType="@_textInput"></MudTextField>
                    </MudItem>
                    <MudItem md="4" xs="12">
                        <h2>Achternaam</h2>
                        <MudTextField @bind-Value=@_user.LastName For="@(() => _user.LastName)" Variant="Variant.Outlined" Label="Achternaam" InputType="@_textInput"></MudTextField>
                    </MudItem>
                    <MudItem md="4" xs="12">
                        <h2>E-mailadres</h2>
                        <MudTextField @bind-Value=@_user.Email For="@(() => _user.Email)" Variant="Variant.Outlined" Label="E-mailadres" InputType="@_emailInput"></MudTextField>
                    </MudItem>
                    <MudItem md="4" xs="12">
                        <h2>Wachtwoord</h2>
                        <MudTextField @bind-Value=@_user.Password For="@(() => _user.Password)" Variant="Variant.Outlined" Label="Wachtwoord" InputType="@_passwordInput"></MudTextField>
                    </MudItem>
                    <MudItem md="4" xs="12">
                        <h2>Wachtwoord herhalen</h2>
                        <MudTextField @bind-Value=@_user.RepeatPassword For="@(() => _user.RepeatPassword)" Variant="Variant.Outlined" Label="Wachtwoord herhalen" InputType="@_passwordInput"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
        @* TODO: Add functionaliteit for uploading pictures *@
        <MudGrid>
            <MudItem md="4" xs="12">
                <h2 Class="alignment-center">Profielfoto uploaden</h2>
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Class="alignment-center">
                    <MudFab Id="upload_profile_picture_button_styling"
                            HtmlTag="label"
                            Icon="@Icons.Material.Filled.Image"
                            Label="Profielfoto"/>
                </MudFileUpload>
            </MudItem>
        </MudGrid>
        @* TODO: Add privacy page and redirect to it *@
        <MudGrid>
            <MudItem md="6"></MudItem> @* For the alignment of the rest of the items in this grid*@
            <MudItem md="4" xs="12">
                <MudCheckBox @bind-Checked="@IsChecked">
                    Ik ga akkoord met de <a href="/">privacyverklaring</a> van MatchMaker.
                </MudCheckBox>
            </MudItem>
            <MudItem md="2" xs="12">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto d-flex" justify-end>@Localizer["Register"]</MudButton>
            </MudItem>

        </MudGrid>
    </FormFields>
</EditForm>
    @code {
    private User _user = new User();

    [Inject]
    public IAuthenticationService AuthenticationService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    private ISnackbar _snackbar { get; set; }
    public bool IsChecked { get; set; }
    public bool ShowRegistrationErrors { get; set; }
    public IEnumerable<string> Errors { get; set; }

    private readonly InputType _textInput = InputType.Text;
    private readonly InputType _emailInput = InputType.Email;
    private readonly InputType _passwordInput = InputType.Password;

    IList<IBrowserFile> profilePictures = new List<IBrowserFile>();

    private async void _validFormSubmitted(EditContext editContext)
    {
        RegisterUser();
        StateHasChanged();
    }

    private async void _invalidFormSubmitted(EditContext editContext)
    {
        _snackbar.Add("Er is iets fout gegaan", Severity.Error);
        StateHasChanged();
    }

    public async Task RegisterUser()
    {
        ShowRegistrationErrors = false;
        // I am missing database TODO hellup database
        // AHHHHHHHHHHH, it no work. Broken. Doesn't give result :(
        var result = await AuthenticationService.RegisterUser(_user);
        if (!result.SuccesfulRegistration)
        {
            _snackbar.Add("Registratie is fout gegaan", Severity.Error);
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    //TODO: Add functionality (make it work and uploading the files to the server)
    private void UploadFiles(IBrowserFile profilePicture)
    {
        profilePictures.Add(profilePicture);
    }
}