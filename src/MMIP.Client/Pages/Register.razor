@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@using MMIP.Infrastructure.Services
@using MMIP.Shared.Entities
@using Microsoft.AspNetCore.Authentication
@inject IStringLocalizer<ApplicationResource> Localizer

<PageTitle>@Localizer["Register"]</PageTitle>

<h1>@Localizer["Register"]</h1>
<MudGrid Justify="Justify.Center" Class="mb-15 mt-2">
    <MudItem md="12">
        <MudCard Elevation="4" Class="rounded-lg">
            <MudCardContent>
                <EditForm Model=@_user OnValidSubmit=@_validFormSubmitted OnInvalidSubmit=@_invalidFormSubmitted>
                    <DataAnnotationsValidator />
                    <FormFields>
                        <MudGrid>
                            <MudItem md="4" xs="12">
                                <MudItem>
                                    <h2>@Localizer["ProfileDescription"]</h2>
                                    <MudTextField @bind-Value=@_user.Description For="@(() => _user.Description)" Label=@Localizer["ProfileDescription"] Variant="Variant.Outlined" Lines="10"></MudTextField>
                                </MudItem>
                            </MudItem>
                            <MudItem md="8" xs="12">
                                <MudGrid>
                                    <MudItem md="4" xs="12" Class="mb-5">
                                        <h2>@Localizer["FirstName"]</h2>
                                        <MudTextField @bind-Value=@_user.FirstName For="@(() => _user.FirstName)" Variant="Variant.Outlined" Label=@Localizer["FirstName"] InputType="@_textInput"></MudTextField>
                                    </MudItem>
                                    <MudItem md="4" xs="12" Class="mb-5">
                                        <h2>@Localizer["Prefix"]</h2>
                                        <MudTextField @bind-Value=@_user.Prefixes For="@(() => _user.Prefixes)" Variant="Variant.Outlined" Label=@Localizer["Prefix"] InputType="@_textInput"></MudTextField>
                                    </MudItem>
                                    <MudItem md="4" xs="12" Class="mb-5">
                                        <h2>@Localizer["LastName"]</h2>
                                        <MudTextField @bind-Value=@_user.LastName For="@(() => _user.LastName)" Variant="Variant.Outlined" Label=@Localizer["LastName"] InputType="@_textInput"></MudTextField>
                                    </MudItem>
                                    <MudItem md="4" xs="12">
                                        <h2>@Localizer["E-mail"]</h2>
                                        <MudTextField @bind-Value=@_user.Email For="@(() => _user.Email)" Variant="Variant.Outlined" Label=@Localizer["E-mail"] InputType="@_emailInput"></MudTextField>
                                    </MudItem>
                                    <MudItem md="4" xs="12">
                                        <h2>@Localizer["Password"]</h2>
                                        <MudTextField @bind-Value=@_user.Password For="@(() => _user.Password)" Variant="Variant.Outlined" Label=@Localizer["Password"] InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="@showPasswordIconClick" AdornmentAriaLabel="Show password"></MudTextField>
                                    </MudItem>
                                    <MudItem md="4" xs="12">
                                        <h2>@Localizer["RepeatPassword"]</h2>
                                        <MudTextField @bind-Value=@_user.RepeatPassword For="@(() => _user.RepeatPassword)" Variant="Variant.Outlined" Label=@Localizer["RepeatPassword"] InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="@showPasswordIconClick" AdornmentAriaLabel="Show password"></MudTextField>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                        </MudGrid>
                        @* TODO: Add functionaliteit for uploading pictures *@
                        <MudGrid>
                            <MudItem md="4" xs="12">
                                <h2 Class="alignment-center">@Localizer["UploadProfilePicture"]</h2>
                                @*TODO: Fix, broken. It doens't show*@
                                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Class="alignment-center">
                                    <MudFab Id="upload_profile_picture_button_styling"
                                            HtmlTag="label"
                                            Icon="@Icons.Material.Filled.Image"
                                            Label=@Localizer["ProfilePicture"] />
                                </MudFileUpload>
                            </MudItem>
                        </MudGrid>
                        @* TODO: Add privacy page and redirect to it *@
                        <MudGrid>
                            <MudItem md="6"></MudItem> @* For the alignment of the rest of the items in this grid*@
                            <MudItem md="4" xs="12">
                                <MudCheckBox @bind-Checked="@IsChecked">
                                    @((MarkupString)Localizer["AgreementPrivacyStatement"].ToString())
                                </MudCheckBox>
                            </MudItem>
                            <MudItem md="2" xs="12">
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto d-flex" justify-end>@Localizer["Register"]</MudButton>
                            </MudItem>
                        </MudGrid>
                    </FormFields>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    private ISnackbar _snackbar { get; set; }
    public bool IsChecked { get; set; }
    public bool ShowRegistrationErrors { get; set; }
    public IEnumerable<string> Errors { get; set; }

    private User _user = new User();
    private bool _isShown;
    private readonly InputType _textInput = InputType.Text;
    private readonly InputType _emailInput = InputType.Email;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private IList<IBrowserFile> _profilePictures = new List<IBrowserFile>();

    private void showPasswordIconClick()
    {
        if (_isShown)
        {
            _isShown = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShown = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async void _validFormSubmitted(EditContext editContext)
    {
        StateHasChanged();
    }

    private async void _invalidFormSubmitted(EditContext editContext)
    {
        _snackbar.Add(@Localizer["SnackbarInvalid"], Severity.Error);
        StateHasChanged();
    }

    //TODO: Add functionality (make it work and uploading the files to the server)
    private void UploadFiles(IBrowserFile profilePicture)
    {
        _profilePictures.Add(profilePicture);
    }
}