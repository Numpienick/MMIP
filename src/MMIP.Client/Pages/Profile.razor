@page "/profile/{Entity}/{Id}"
@using MMIP.Shared.Entities
@using MMIP.Client.Controllers
@using MMIP.Shared.Views

@inject IStringLocalizer<ApplicationResource> _localizer
@inject RequestController RequestController;
@inject NavigationManager navigationManager;

<MudCard Elevation="4" Class="px-6">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" Class="card-centered-text">
            <h1>@(CurrentEntity is User ? User.Name : Organization.Name)</h1>
        </MudItem>
        <MudItem md="2" xs="12" Class="card-centered-text">
            <MudAvatar Style="height:140px; width:140px;">
                <MudImage Src="Assets/Img/ProfilePictureTest.jpg"></MudImage>
            </MudAvatar>
        </MudItem>
        <MudItem md="10" xs="12" Class="card-centered-text">
            <h2>Beschrijving</h2>
            @* <p>@(CurrentEntity is User ? User.Description : Organization.Description)</p> *@
        </MudItem>

        <MudItem xs="12" Class="card-centered-text">
            <MudDivider DividerType="DividerType.Middle" Class="my-6" />
            <h2>Challenges</h2>
        </MudItem>
        <MudGrid Justify="Justify.FlexStart" Spacing="4">
            @foreach (var cardData in Challenges)
            {
                <MudItem xs="12" sm="6" md="4" lg="4" xl="3">
                    <ChallengeCardComponent CardData="@cardData"></ChallengeCardComponent>
                </MudItem>
            }
        </MudGrid>
    </MudGrid>
</MudCard>

@code {
    //TODO: remove if database connected
    public User User = new() { Id = new Guid(), CreatedDate = default, UpdatedDate = default, Name = "John Wick", Description = "Dit is een mooie beschrijving van mij, want ik ben heel capabel enzo." };
    public Organization Organization = new() { Id = new Guid(), CreatedDate = default, UpdatedDate = default, Name = "Continental Hotel", /* Description = "Heel mooi hotel, super discreet, voor al uw verblijven geschikt.", */ Challenges = null };
    public Object CurrentEntity;
    private const int PageSize = 6;
    private bool _loadMoreChallenges = false;

    public List<ChallengeCardView> Challenges = new();
    [Parameter]
    public string Entity { get; set; }
    [Parameter]
    public string Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (!Entity.ToLower().Equals("user") || string.IsNullOrEmpty(Entity))
            if (!Entity.ToLower().Equals("organization") || string.IsNullOrEmpty(Entity))
                navigationManager.NavigateTo($"/Error/{Entity}", forceLoad: true);

        if (Entity.ToLower().Equals("user"))
            CurrentEntity = User;
        else if (Entity.ToLower().Equals("organization"))
            CurrentEntity = Organization;

        await LoadBatch();
        await base.OnInitializedAsync();
    }

    // TODO: Change this to only get 6 from the database each time.
    public async Task LoadBatch()
    {
        Challenges.AddRange(await _getChallengesById());
    }

    // TODO: Change to take only 6 challanges a time.
    private async Task<List<ChallengeCardView>> _getChallengesById()
    {
        return await RequestController.Get<ChallengeCardView>($"organizations/challenges?id={Id}&&take={PageSize}&&skip={Challenges.Count}");
    }
}
