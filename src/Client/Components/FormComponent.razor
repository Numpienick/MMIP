@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using System.Net.Http.Headers
@using global::Shared.Entities
@using System.Globalization
<h3>Form</h3>

@code {
    [Inject] 
    ISnackbar Snackbar { get; set; }
    [Parameter]
    public RenderFragment FormFields { get; set; }
    [Parameter]
    public object Model { get; set; }
    Challenge model = new()
    {
        Title = "test",
        Description = "awdwad"

    };
    public string modelName;

    private static readonly HttpClient Client = new HttpClient();

}
@functions{
    protected override void OnInitialized()
    {
        modelName = Model.GetType().Name;
        Console.WriteLine(modelName);
        base.OnInitialized();
    }

    void ValidFormSubmitted(EditContext context)
    {
        Post();
        Snackbar.Add(Model.GetType().Name + " toegevoegd!", Severity.Success);
        StateHasChanged();
    }

    void InvalidFormSubmitted(EditContext context)
    {
        Snackbar.Add("Er is iets fout gegaan", Severity.Error);
        StateHasChanged();
    }

    //TODO: post doesn't work yet, need to fix. Something in controller and routing of it is brokey.
    async Task Post()
    {
        string requestUri = ("https://localhost:5238/" + Model.GetType().Name + 's').ToLower();
        string myContent = JsonSerializer.Serialize(Model);

        Console.WriteLine(myContent);
        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        var byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
        Console.WriteLine(byteContent);
        await Client.PostAsync(requestUri, byteContent);
    }

}
<EditForm Model=@Model OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
    <DataAnnotationsValidator />
    @FormFields
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
</EditForm>

