@using Client.StateContainers;
@using global::Shared.Entities;

@inject NavigationManager navigationManager;
@* TODO: Remove when database is working.*@
@inject TempStateContainer challengeStateContainer;

<MudItem md="3" xs="6">
    <MudCard @onclick="() => NavigateToChallengeView(Challenge.Id)" Elevation="4" Class="rounded-lg">
        <MudCardMedia Image=@Challenge.BannerImagePath Height="100"></MudCardMedia>
        <MudCardContent>
            <h2 class="card-centered-text">@Challenge.Title</h2>
        </MudCardContent>
        <MudCardContent>
            <MudGrid>
                <MudItem md="6">
                    <h3 class="card-organization-title">@Challenge.Organization.Name</h3>
                </MudItem>
                <MudItem md="6">
                    <MudCardMedia Image="ImagesTemp/1600x888.jpg" Height="80"></MudCardMedia>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardContent>
            <p class="card-centered-text">@Challenge.ShortDescription</p>
        </MudCardContent>
        <MudDivider></MudDivider>
        <MudCardContent>
            <MudGrid Justify="Justify.Center">
                @foreach (string tag in Challenge.Tags)
                {
                    <MudChip>@tag</MudChip>
                }
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {
    [Parameter]
    public Challenge Challenge { get; set; }

    // TODO: Remove state container when database is working.
    public void NavigateToChallengeView(Guid challengeId)
    {
        challengeStateContainer.SetValue(Challenge);
        navigationManager.NavigateTo($"/challenge-view/{challengeId}");
    }
}