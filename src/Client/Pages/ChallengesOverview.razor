@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using System.Text.Json;
@using global::Shared.Entities;
@using global::Shared.Filters;

@inject IStringLocalizer<ApplicationResource> _localizer
@inject HttpClient Client;

@page "/challenges-overview"

<h1 class="mb-10">@_localizer["ChallengesPageTitle"]</h1>

<MudGrid Justify="Justify.Center" Class="mb-15">
    <MudItem md="12">
        <MudCard Elevation="4" Class="rounded-lg">
            <MudGrid Justify="Justify.Center">
                <MudItem md="8" Class="mb-10 mt-8">
                    <MudTextField @bind-Value="SearchTerms" Label="@_localizer["SearchTerms"]" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
                </MudItem>
            </MudGrid>

            @foreach (List<Challenge> batch in ChallengeBatches)
            {
                <MudGrid Justify="Justify.Center" Spacing="8">
                    @foreach (Challenge challenge in batch)
                    {
                        <ChallengeCardComponent Challenge="@challenge"></ChallengeCardComponent>
                    }
                </MudGrid>
            }

            <MudGrid Justify="Justify.Center" Class="mt-15">
                <MudItem md="6">
                    <MudButton @onclick="@_loadChallengeBatchOnClick" FullWidth="true" Variant="Variant.Filled" Color="Color.Inherit" Disabled="@_loadMoreChallenges">@_localizer["ChallengesLoadMore"]</MudButton>
                </MudItem>
            </MudGrid>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private const int CardsPerRow = 3;
    private const int RowsPerBatch = 2;
    private bool _loadMoreChallenges = false;
    private ICriteria? _filterCriteria = null;

    public string? SearchTerms { get; set; }
    public List<List<Challenge>> ChallengeBatches = new List<List<Challenge>>();
    public List<Challenge> AllChallenges = new List<Challenge>();

    protected override async Task OnInitializedAsync()
    {
        AllChallenges = await _getChallenges();
        _sortChallengesByDateAscending(AllChallenges);
        LoadBatch();
        base.OnInitialized();
    }

    // TODO: Change this to only get 6 from the database each time.
    public void LoadBatch()
    {
        for (int i = 0; i < RowsPerBatch; i++)
        {
            List<Challenge> rowBatch = new List<Challenge>();

            for (int j = 0; j < CardsPerRow; j++)
            {
                Challenge firstChallenge = new Challenge();

                if (AllChallenges.FirstOrDefault() == null)
                {
                    break;
                }

                firstChallenge = AllChallenges.First();
                rowBatch.Add(firstChallenge);
                AllChallenges.Remove(firstChallenge);
            }

            ChallengeBatches.Add(rowBatch);
        }

        if (AllChallenges.Count == 0)
        {
            _loadMoreChallenges = true;
        }
    }

    private void _sortChallengesByDateAscending(List<Challenge> challenges)
    {
        challenges.Sort((x, y) => x.StartDate.CompareTo(y.StartDate));
    }

    private void _loadChallengeBatchOnClick(MouseEventArgs mouseEventArgs)
    {
        LoadBatch();
    }

    // TODO: Change to take only 6 challanges a time.
    private async Task<List<Challenge>> _getChallenges()
    {
        string jsonObject = JsonSerializer.Serialize(_filterCriteria);
        return await Client.GetFromJsonAsync<List<Challenge>>($"challenges?filterCriteria={jsonObject}");
    }
}